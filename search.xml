<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Win下C++ TUI控制台交互应用的一些技巧</title>
      <link href="/2022/07/10/WinCppTuiTricks/"/>
      <url>/2022/07/10/WinCppTuiTricks/</url>
      
        <content type="html"><![CDATA[<h1 id="控制台配置相关"><a href="#控制台配置相关" class="headerlink" title="控制台配置相关"></a>控制台配置相关</h1><h2 id="设置控制台代码页为UTF-8"><a href="#设置控制台代码页为UTF-8" class="headerlink" title="设置控制台代码页为UTF-8"></a>设置控制台代码页为UTF-8</h2><p>简中版Windows下控制台默认代码页为936(GBK), 如果直接显示UTF8内容会乱码, 此时需要用以下代码将代码页修改到兼容UTF-8的代码页.</p><p>首先如果你使用msvc开发应用,必须确保启用编译器的utf8模式</p><ul><li><p>如果你使用Visual Studio项目进行构建， 你需要在项目属性中找到<code>Configuration Properties &gt; C/C++ &gt; Command Line</code>, 在<code>Additional Options</code>中添加<code>/utf8</code>参数（详见<a href="https://docs.microsoft.com/en-us/cpp/build/reference/utf-8-set-source-and-executable-character-sets-to-utf-8?view=msvc-170#to-set-this-compiler-option-in-the-visual-studio-development-environment">此文档</a>）</p></li><li><p>如果你正在使用cmake进行构建,添加下面这段代码到<code>CMakeList.txt</code>中</p></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_compile_options</span>(<span class="string">&quot;$&lt;$&lt;C_COMPILER_ID:MSVC&gt;:/utf-8&gt;&quot;</span>)</span><br><span class="line"><span class="keyword">add_compile_options</span>(<span class="string">&quot;$&lt;$&lt;CXX_COMPILER_ID:MSVC&gt;:/utf-8&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><p>此时编译器将使用UTF8模式编译应用.</p><p>接下来在Main函数开头执行下列之一函数:</p><h3 id="Method1-使用std-setlocale"><a href="#Method1-使用std-setlocale" class="headerlink" title="Method1: 使用std::setlocale"></a>Method1: 使用std::setlocale</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;clocale&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setConsoleUTF8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::<span class="built_in">setlocale</span>(LC_ALL, <span class="string">&quot;chs.utf8&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Method2-使用Windows-h中的native方法"><a href="#Method2-使用Windows-h中的native方法" class="headerlink" title="Method2: 使用Windows.h中的native方法"></a>Method2: 使用Windows.h中的native方法</h3><p>（实测此方法在输出效率上会优于Method1 (待验证)）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;codecvt&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setConsoleUTF8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">SetConsoleOutputCP</span>(CP_UTF8);</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span> (disable: 4996)</span></span><br><span class="line">    <span class="function">std::locale <span class="title">utf8</span><span class="params">(std::locale(), <span class="keyword">new</span> std::codecvt_utf8_utf16&lt;<span class="type">wchar_t</span>&gt;)</span></span>;</span><br><span class="line">    std::wcout.<span class="built_in">imbue</span>(utf8);</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span> (default: 4996)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启用虚拟终端-VT-Mode"><a href="#启用虚拟终端-VT-Mode" class="headerlink" title="启用虚拟终端(VT Mode)"></a>启用虚拟终端(VT Mode)</h2><p>启用虚拟终端模式后可以在Windows中使用在Linux&#x2F;Mac中可用的转义字符序列控制终端行为<br>经测试虚拟终端功能仅支持win10及更新的系统.<br>可参考<a href="https://docs.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences">相关文档</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">EnableVTMode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Set output mode to handle virtual terminal sequences</span></span><br><span class="line">    HANDLE hOut = <span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);</span><br><span class="line">    <span class="keyword">if</span> (hOut == INVALID_HANDLE_VALUE)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DWORD dwMode = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">GetConsoleMode</span>(hOut, &amp;dwMode))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dwMode |= ENABLE_VIRTUAL_TERMINAL_PROCESSING;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">SetConsoleMode</span>(hOut, dwMode))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="控制台输出相关"><a href="#控制台输出相关" class="headerlink" title="控制台输出相关"></a>控制台输出相关</h1><h2 id="获取-x2F-修改光标位置信息"><a href="#获取-x2F-修改光标位置信息" class="headerlink" title="获取&#x2F;修改光标位置信息"></a>获取&#x2F;修改光标位置信息</h2><p>使用以下方法可以快速获取&#x2F;修改光标位置,或者按照相对距离移动光标</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setCursorPos</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE hOut;</span><br><span class="line">    COORD Position;</span><br><span class="line"></span><br><span class="line">    hOut = <span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);</span><br><span class="line"></span><br><span class="line">    Position.X = x;</span><br><span class="line">    Position.Y = y;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SetConsoleCursorPosition</span>(hOut, Position);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">COORD <span class="title">getCursorPos</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CONSOLE_SCREEN_BUFFER_INFO csbi;</span><br><span class="line">    HANDLE hOut;</span><br><span class="line">    COORD Position;</span><br><span class="line"></span><br><span class="line">    hOut = <span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">GetConsoleScreenBufferInfo</span>(hOut, &amp;csbi);</span><br><span class="line"></span><br><span class="line">    Position.X = csbi.dwCursorPosition.X;</span><br><span class="line">    Position.Y = csbi.dwCursorPosition.Y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Position;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">moveCursorPos</span><span class="params">(<span class="type">int</span> vecX, <span class="type">int</span> vecY)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> initPos = <span class="built_in">getCursorPos</span>();</span><br><span class="line">    HANDLE hOut;</span><br><span class="line">    COORD Position;</span><br><span class="line"></span><br><span class="line">    hOut = <span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);</span><br><span class="line"></span><br><span class="line">    Position.X = initPos.X + vecX;</span><br><span class="line">    Position.Y = initPos.Y + vecY;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SetConsoleCursorPosition</span>(hOut, Position);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改输出字符颜色"><a href="#修改输出字符颜色" class="headerlink" title="修改输出字符颜色"></a>修改输出字符颜色</h2><p>修改字符颜色建议使用VT模式完成<br>下面代码首先需要<a href="#%E5%90%AF%E7%94%A8%E8%99%9A%E6%8B%9F%E7%BB%88%E7%AB%AF-VT-Mode">启用VT模式</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> ESC = <span class="string">&#x27;\033&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> ATTR_NORMAL = <span class="number">0</span>; <span class="comment">// 传入此常量可将当前颜色设置恢复为预设值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//前景色</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">ConsoleForeground</span> : <span class="type">int</span></span><br><span class="line">&#123;</span><br><span class="line">    FG_BLACK = <span class="number">30</span>,</span><br><span class="line">    FG_RED = <span class="number">31</span>,</span><br><span class="line">    FG_GREEN = <span class="number">32</span>,</span><br><span class="line">    FG_YELLOW = <span class="number">33</span>,</span><br><span class="line">    FG_BLUE = <span class="number">34</span>,</span><br><span class="line">    FG_MAGENTA = <span class="number">35</span>,</span><br><span class="line">    FG_CYAN = <span class="number">36</span>,</span><br><span class="line">    FG_WHITE = <span class="number">37</span>,</span><br><span class="line">    FG_DEFAULT = <span class="number">39</span>,</span><br><span class="line">    FG_LIGHT_BLACK = <span class="number">90</span>,</span><br><span class="line">    FG_LIGHT_RED = <span class="number">91</span>,</span><br><span class="line">    FG_LIGHT_GREEN = <span class="number">92</span>,</span><br><span class="line">    FG_LIGHT_YELLOW = <span class="number">93</span>,</span><br><span class="line">    FG_LIGHT_BLUE = <span class="number">94</span>,</span><br><span class="line">    FG_LIGHT_MAGENTA = <span class="number">95</span>,</span><br><span class="line">    FG_LIGHT_CYAN = <span class="number">96</span>,</span><br><span class="line">    FG_LIGHT_WHITE = <span class="number">97</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 背景色</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">ConsoleBackground</span> : <span class="type">int</span></span><br><span class="line">&#123;</span><br><span class="line">    BG_BLACK = <span class="number">40</span>,</span><br><span class="line">    BG_RED = <span class="number">41</span>,</span><br><span class="line">    BG_GREEN = <span class="number">42</span>,</span><br><span class="line">    BG_YELLOW = <span class="number">43</span>,</span><br><span class="line">    BG_BLUE = <span class="number">44</span>,</span><br><span class="line">    BG_MAGENTA = <span class="number">45</span>,</span><br><span class="line">    BG_CYAN = <span class="number">46</span>,</span><br><span class="line">    BG_WHITE = <span class="number">47</span>,</span><br><span class="line">    BG_DEFAULT = <span class="number">49</span>,</span><br><span class="line">    BG_LIGHT_BLACK = <span class="number">100</span>,</span><br><span class="line">    BG_LIGHT_RED = <span class="number">101</span>,</span><br><span class="line">    BG_LIGHT_GREEN = <span class="number">102</span>,</span><br><span class="line">    BG_LIGHT_YELLOW = <span class="number">103</span>,</span><br><span class="line">    BG_LIGHT_BLUE = <span class="number">104</span>,</span><br><span class="line">    BG_LIGHT_MAGENTA = <span class="number">105</span>,</span><br><span class="line">    BG_LIGHT_CYAN = <span class="number">106</span>,</span><br><span class="line">    BG_LIGHT_WHITE = <span class="number">107</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setColorAttr</span><span class="params">(<span class="type">int</span> attr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; ESC &lt;&lt; <span class="string">&quot;[&quot;</span> &lt;&lt; attr &lt;&lt; <span class="string">&quot;m&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>除此之外,部分终端还支持设置自定义的RGB颜色<br>详见<a href="https://docs.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences#extended-colors">Microsoft docs</a></p></blockquote><h2 id="清空控制台屏幕"><a href="#清空控制台屏幕" class="headerlink" title="清空控制台屏幕"></a>清空控制台屏幕</h2><h3 id="Method1"><a href="#Method1" class="headerlink" title="Method1"></a>Method1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">clearScreen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE hConsole = <span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);</span><br><span class="line">    COORD coordScreen = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;    <span class="comment">// home for the cursor</span></span><br><span class="line">    DWORD cCharsWritten;</span><br><span class="line">    CONSOLE_SCREEN_BUFFER_INFO csbi;</span><br><span class="line">    DWORD dwConSize;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the number of character cells in the current buffer.</span></span><br><span class="line">    <span class="keyword">if</span>( !<span class="built_in">GetConsoleScreenBufferInfo</span>(hConsole, &amp;csbi ))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dwConSize = csbi.dwSize.X * csbi.dwSize.Y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fill the entire screen with blanks.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( !<span class="built_in">FillConsoleOutputCharacter</span>(hConsole,        <span class="comment">// Handle to console screen buffer</span></span><br><span class="line">                                    (TCHAR) <span class="string">&#x27; &#x27;</span>,     <span class="comment">// Character to write to the buffer</span></span><br><span class="line">                                    dwConSize,       <span class="comment">// Number of cells to write</span></span><br><span class="line">                                    coordScreen,     <span class="comment">// Coordinates of first cell</span></span><br><span class="line">                                    &amp;cCharsWritten ))<span class="comment">// Receive number of characters written</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the current text attribute.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( !<span class="built_in">GetConsoleScreenBufferInfo</span>( hConsole, &amp;csbi ))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the buffer&#x27;s attributes accordingly.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( !<span class="built_in">FillConsoleOutputAttribute</span>(hConsole,         <span class="comment">// Handle to console screen buffer</span></span><br><span class="line">                                    csbi.wAttributes, <span class="comment">// Character attributes to use</span></span><br><span class="line">                                    dwConSize,        <span class="comment">// Number of cells to set attribute</span></span><br><span class="line">                                    coordScreen,      <span class="comment">// Coordinates of first cell</span></span><br><span class="line">                                    &amp;cCharsWritten )) <span class="comment">// Receive number of characters written</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Put the cursor at its home coordinates.</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">SetConsoleCursorPosition</span>( hConsole, coordScreen );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Method2-需启用VT模式"><a href="#Method2-需启用VT模式" class="headerlink" title="Method2: 需启用VT模式"></a>Method2: 需启用VT模式</h3><p>此方法执行效率略低于Method1(待验证)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">clearScreen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;\033[H\033[2J\033[3J&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="处理键盘输入相关"><a href="#处理键盘输入相关" class="headerlink" title="处理键盘输入相关"></a>处理键盘输入相关</h1><p>使用io库操作标准输入时, 用户的输入都会被存储在缓冲区<br>如需直接对键盘输入进行处理, 可以使用<code>conio.h</code>中的<code>getch()</code>与<code>kbhit()</code>函数  </p><p><code>getch()</code> 可用于获取键盘输入的一个字符(不会回显), 当缓冲区内没有待处理的键盘输入时, 将阻塞程序</p><p><code>kbhit()</code> 可用于判断键盘是否有输入, 若缓冲区内没有待处理的键盘输入时, 将返回false</p><p>一个典型的键盘处理方法如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 本方法不会阻塞线程</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InputService::tickInput</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (_kbhit())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> key = _getch();</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="number">0xE0</span> || key == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 处理功能键或方向键</span></span><br><span class="line">            key = _getch();</span><br><span class="line">            <span class="keyword">switch</span> (key)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">72</span>:</span><br><span class="line">                    <span class="comment">// Up arrow</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">80</span>:</span><br><span class="line">                    <span class="comment">// Down arrow</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">75</span>:</span><br><span class="line">                    <span class="comment">// Left arrow</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">77</span>:</span><br><span class="line">                    <span class="comment">// Right arrow</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 如果需要处理更多的功能键,可在此处添加</span></span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 在此处处理按键输入,输入按键即为对应字符</span></span><br><span class="line">            <span class="comment">// 特别的, Enter键key为0x0D(&#x27;\r&#x27;), Backspace键为0x08, Esc键为0x1B, Tab键为0x09</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Windows </tag>
            
            <tag> Console </tag>
            
            <tag> VC++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clearing console screen in C++ program</title>
      <link href="/2022/04/10/CPPClearConsole/"/>
      <url>/2022/04/10/CPPClearConsole/</url>
      
        <content type="html"><![CDATA[<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>When writing some console app, we sometimes have requirements to interactive with the console screen directly. One example is clearing the console screen.</p><p>In this article, you will learn how to clear the console screen properly in C++ code.</p><h1 id="Bad-Implement"><a href="#Bad-Implement" class="headerlink" title="Bad Implement"></a>Bad Implement</h1><p>To clear the console screen, one of the approach is directly using the system console command:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span> <span class="comment">// required for `system`</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clearScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// On Windows:</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ----OR----</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// On LINUX/UN*X:</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Yeah… It works. However, there are some problems.</p><ol><li>Running an external application cost a lot of system resources. If you need to clear the console screen frequently, maybe one time per second or even higher, you’d better try other ways.</li><li>This approach depends on the OS. If you are writing some cross-platform program, you have to use some macro tricks to workaround it. And if you are writing a program for some special Linux platform, the <code>clear</code> command could just unavailable, which can break your program.</li></ol><h1 id="A-universal-approach-to-clear-the-screen-Recommend"><a href="#A-universal-approach-to-clear-the-screen-Recommend" class="headerlink" title="A universal approach to clear the screen (Recommend)"></a>A universal approach to clear the screen (Recommend)</h1><p>Fortunately, almost all terminals now follow a standard. Which allow us to have a universal way to clear the console.</p><p>Try:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clearScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;\033[2J\033[1;1H&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>In this approach, the first escape code <code>\033[2J</code> can clear the screen, and the second escape code <code>\033[1;1H</code> can move the cursor to (1,1).</p><h1 id="Better-approach-on-Windows-platform"><a href="#Better-approach-on-Windows-platform" class="headerlink" title="Better approach on Windows platform"></a>Better approach on Windows platform</h1><div class="note warning flat"><p>This approach is only available on Windows! If you have the requirement to target to Linux&#x2F;UN*X system, just use the previous code directly.</p></div><p>Although the previous example work well on Windows, there is one obvious shortcoming: after clearing the screen, you can still see the scrollbar exist, and if you scroll up, you can see the old log is still there.</p><p>Unfortunately, to resolve this problem, we have to use a native approach.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clearScreen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE hConsole = <span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);</span><br><span class="line">    COORD coordScreen = &#123; <span class="number">0</span>, <span class="number">0</span> &#125;;    <span class="comment">// home for the cursor</span></span><br><span class="line">    DWORD cCharsWritten;</span><br><span class="line">    CONSOLE_SCREEN_BUFFER_INFO csbi;</span><br><span class="line">    DWORD dwConSize;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the number of character cells in the current buffer.</span></span><br><span class="line">    <span class="keyword">if</span>( !<span class="built_in">GetConsoleScreenBufferInfo</span>( hConsole, &amp;csbi ))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dwConSize = csbi.dwSize.X * csbi.dwSize.Y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fill the entire screen with blanks.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( !<span class="built_in">FillConsoleOutputCharacter</span>( hConsole,        <span class="comment">// Handle to console screen buffer</span></span><br><span class="line">                                     (TCHAR) <span class="string">&#x27; &#x27;</span>,     <span class="comment">// Character to write to the buffer</span></span><br><span class="line">                                     dwConSize,       <span class="comment">// Number of cells to write</span></span><br><span class="line">                                     coordScreen,     <span class="comment">// Coordinates of first cell</span></span><br><span class="line">                                     &amp;cCharsWritten ))<span class="comment">// Receive number of characters written</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the current text attribute.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( !<span class="built_in">GetConsoleScreenBufferInfo</span>( hConsole, &amp;csbi ))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the buffer&#x27;s attributes accordingly.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( !<span class="built_in">FillConsoleOutputAttribute</span>( hConsole,         <span class="comment">// Handle to console screen buffer</span></span><br><span class="line">                                     csbi.wAttributes, <span class="comment">// Character attributes to use</span></span><br><span class="line">                                     dwConSize,        <span class="comment">// Number of cells to set attribute</span></span><br><span class="line">                                     coordScreen,      <span class="comment">// Coordinates of first cell</span></span><br><span class="line">                                     &amp;cCharsWritten )) <span class="comment">// Receive number of characters written</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Put the cursor at its home coordinates.</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">SetConsoleCursorPosition</span>( hConsole, coordScreen );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Related-amp-Reference"><a href="#Related-amp-Reference" class="headerlink" title="Related &amp; Reference"></a>Related &amp; Reference</h1><ol><li>Microsoft docs: <a href="https://docs.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences">https://docs.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences</a></li><li><a href="https://stackoverflow.com/questions/17335816/clear-screen-using-c">https://stackoverflow.com/questions/17335816/clear-screen-using-c</a></li><li><a href="https://stackoverflow.com/questions/9597844/clear-screen-command-in-c">https://stackoverflow.com/questions/9597844/clear-screen-command-in-c</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Windows </tag>
            
            <tag> Linux </tag>
            
            <tag> Visual C++ </tag>
            
            <tag> Console </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Manjaro中使用BootSplash配置启动动画</title>
      <link href="/2022/01/23/ManjaroSplash/"/>
      <url>/2022/01/23/ManjaroSplash/</url>
      
        <content type="html"><![CDATA[<p>最近全新安了一个Manjaro, 发现开机只有黑屏没有启动动画或者日志.</p><h1 id="恢复启动日志"><a href="#恢复启动日志" class="headerlink" title="恢复启动日志"></a>恢复启动日志</h1><p>众所周知, linux系统启动的时候默认是会打出详细的启动日志的(就是一堆OK的那一个).</p><p>但是在Manjaro中默认并不会打印出这部分日志, 因为Manjaro默认在启动参数中添加了<code>quiet</code>来隐藏启动日志, 要想恢复只需要修改grub配置文件即可</p><p>打开终端, 运行以下指令修改grub config:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kate /etc/default/grub</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>如果你希望使用其它文本编辑器来编辑(如vim), 你可能需要使用<code>sudo</code>运行,否则无法保存.</p></div><p>找到类似以下的一行:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">&quot;quiet apparmor=1 security=apparmor udev.log_priority=3&quot;</span></span><br></pre></td></tr></table></figure><p>将其中的<code>quiet</code>删除, 然后保存.</p><p>最后别忘了要更新grub, 才可以应用刚刚所作的更改. 在终端上运行:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure><p>重启即可看到熟悉的日志效果了.</p><p><del>可以把电脑拿去星巴克装逼了</del></p><h1 id="使用BootSplash配置启动动画"><a href="#使用BootSplash配置启动动画" class="headerlink" title="使用BootSplash配置启动动画"></a>使用BootSplash配置启动动画</h1><p>在开始前强烈建议运行以下命令确保所有软件包与软件源已更新到最新:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Syu</span><br></pre></td></tr></table></figure><p>运行以下命令安装必要的BootSplash组件, 主题与配置工具</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S bootsplash-systemd bootsplash-manager bootsplash-theme-manjaro</span><br></pre></td></tr></table></figure><p>安装完成后, 运行以下命令, <code>bootsplash-manager</code>就可以帮你完成剩余的所有设置了.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo bootsplash-manager -s manjaro</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>执行上面的命令会自动执行<code>mkinitcpio</code>和<code>update-grub</code></p></div><p>当然你也可以安装其它的<code>bootsplash-manager</code>主题, 只要在<code>pacman -S bootsplash-theme-</code>后按Tab键即可查看所有的主题. 在AUR仓库中可能有更多的主题可供下载.</p><p>BootSplash主题基本上就是不同的logo加一个Win10的ProcessRing, 其中<code>bootsplash-theme-vendor</code>可以将主板品牌logo作为图标(需要UEFI固件支持)</p><blockquote><p>如果你不想用这样的Win10风开机动画的话, 可以考虑安装Plymouth<br>只要参考<a href="https://wiki.manjaro.org/index.php/Plymouth">这篇文章</a>即可, 此处不作展开<br>Plymouth有非常丰富的动画主题可以下载, 参考 <a href="https://github.com/adi1090x/plymouth-themes">https://github.com/adi1090x/plymouth-themes</a><br>总之比这个win10风好看多了 (</p></blockquote><p><img src="/2022/01/23/ManjaroSplash/bootsplash_result.png" alt="result"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Arch Linux </tag>
            
            <tag> Manjaro </tag>
            
            <tag> KDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Photoshop中将插图转换为渐变线稿效果</title>
      <link href="/2021/08/29/PSColorSketch/"/>
      <url>/2021/08/29/PSColorSketch/</url>
      
        <content type="html"><![CDATA[<p>今天刚刚看到一个不错的ps的图片效果，就先码在这了。</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>Adobe Photoshop 2021 v22.5.0 理论上应该适用于所有较新版本的ps。</p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>原图：<br><img src="/2021/08/29/PSColorSketch/original.jpg" alt="original"><br>结果：<br><img src="/2021/08/29/PSColorSketch/result.jpg" alt="result"></p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ol><li>将图片图层复制一份，进行去色<code>Shift + Ctrl + U</code><br><img src="/2021/08/29/PSColorSketch/s1.png" alt="s1">  </li><li>再次复制图层，对最上层图层应用反相<code>Ctrl + I</code><br><img src="/2021/08/29/PSColorSketch/s2.png" alt="s2">  </li><li>对该图层应用最小值滤镜(滤镜&gt;其它&gt;最小值)，半径<code>1</code>，模式<code>方形</code>  </li><li>调整第三图层混合模式为<code>颜色减淡</code>，此时插图已还原为线稿<br><img src="/2021/08/29/PSColorSketch/s4.png" alt="s4">  </li><li>在最上层新建图层，应用一个渐变，并设置混合模式为<code>滤色</code>，即可应用渐变线稿的效果<br><img src="/2021/08/29/PSColorSketch/s5.png" alt="s5"></li></ol><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><ol><li>用作素材的插图最好不要有太多背景，否则容易导致人像不突出  </li><li>追求精致的话可以适当调节色阶让线条更加明显</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>方法来自此视频：<a href="https://www.bilibili.com/video/BV1Uf4y1n7zK">BV1Uf4y1n7zK</a></p><p>示例所用图片: <a href="https://www.pixiv.net/artworks/63093148">pixiv id 63093148</a> 侵删</p>]]></content>
      
      
      
        <tags>
            
            <tag> PixelArt </tag>
            
            <tag> Photoshop </tag>
            
            <tag> Anime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一台使用Modern Standby的电脑安装了G Hub， 这是它睡眠状态的变化--解决G Hub与Modern Standby不兼容问题</title>
      <link href="/2021/08/02/ModernStandbyWithGHub/"/>
      <url>/2021/08/02/ModernStandbyWithGHub/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>我在最近买了一台使用Modern Standby作为睡眠模式的笔记本， 并配合我的<code>G304</code>使用， 安装了<code>Logitech G Hub</code>软件。</p><p>但是， 在使用一段时间后发现，我发信我的电脑完全无法进入睡眠状态，无论是使用睡眠按钮还是等待屏幕超时，电脑总会在屏幕熄灭10min左右后重新亮起，然后再次熄灭， 以此循环</p><p>MS提供了sleepstudy工具用于分析待机状态，管理员权限运行以下指令获得待机报告  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powercfg /sleepstudy</span><br></pre></td></tr></table></figure><p><img src="/2021/08/02/ModernStandbyWithGHub/sleepstudy1.png" alt="sleepstudy"></p><p>一看待机报告， 好家伙， 电脑在按下睡眠按钮后完全没有进入睡眠模式，而是在<code>Active</code>和<code>Screen Off</code>中循环。而<code>Screen Off</code>的<code>EXIT REASON</code>均为<code>Mouse Input</code>，即检测到鼠标动作（此时显然我是没有动鼠标的）。</p><p>经过测试，即使我关闭无限鼠标和触摸板， 系统仍然在<code>Screen Off</code> 和 <code>Active</code>之间鬼畜, 无法进入<code>Sleep</code>状态。只有在拔出无限鼠标接收器后才可正常睡眠。</p><p>后来经过查阅，是G Hub在电脑即将从<code>Screen Off</code>转至<code>Sleep</code>状态时持续通过虚拟鼠标持续给予电脑输入，导致电脑再次被唤醒。</p><h1 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h1><h2 id="Modern-Standby"><a href="#Modern-Standby" class="headerlink" title="Modern Standby"></a>Modern Standby</h2><blockquote><p>电脑睡眠模式是否为Modern Standby可由以下指令查询  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powercfg -a</span><br></pre></td></tr></table></figure><p>若S0低电量待机处于激活状态且S3待机处于不支持&#x2F;禁用状态，那么你的电脑即使用Modern Standby</p></blockquote><p>Modern Standby (即S0低电量待机)是微软在win10中推广的新睡眠模式<br>根据官方文档的介绍, 现代待机可以选择性地使电脑保持唤醒（Screen off 或 Connected Standby）状态和睡眠状态(Disconnected Standby, 类似S3睡眠)，使得关键应用能按需在后台保持运行（例如闹钟、音频播放、Windows更新等）</p><p>听起来牛批坏了，不是吗？ 嗯…当一样东西听上去牛批坏了，那么它可能真的是坏的。</p><p>目前Modern Standby仍不能很好的解决外设唤醒的逻辑。特别是与鼠标。即使你在设备管理器中禁止鼠标唤醒电脑，它却仍可在Modern Standby中唤醒。</p><p>我以前有禁止鼠标唤醒电脑的习惯（因为鼠标太容易误触了），但是切换到Modern Standby后， 在设备管理器中禁止完全不起作用，照样能唤醒</p><h2 id="G-Hub"><a href="#G-Hub" class="headerlink" title="G Hub"></a>G Hub</h2><p>为了实现鼠标宏功能， G Hub会向系统注册一个虚拟鼠标(<code>Logitech G HUB Virtual Mouse</code>)，由进程lghub_agent控制。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="Method1-禁用虚拟鼠标"><a href="#Method1-禁用虚拟鼠标" class="headerlink" title="Method1: 禁用虚拟鼠标"></a>Method1: 禁用虚拟鼠标</h2><p>上文提到导致系统一直无法进入睡眠模式的原因是G Hub的虚拟鼠标发出指令， 那么一种解决办法就是直接禁用掉这个虚拟鼠标</p><p>打开设备管理器， 在<code>鼠标和其它指针设备</code>中找到位置为<code>Logitech G HUB Virtual Mouse</code>的鼠标（如图所示），在驱动程序页面中选择禁用即可.<br><img src="/2021/08/02/ModernStandbyWithGHub/disable_vmouse.png" alt="vmouse">  </p><p>这样做的缺点是， 禁用之后与点击鼠标有关的宏(如连点宏)就直接用不了了&#x3D; &#x3D;， 有以上使用需求的可以使用方法2处理。</p><h2 id="Method2-配置计划任务"><a href="#Method2-配置计划任务" class="headerlink" title="Method2: 配置计划任务"></a>Method2: 配置计划任务</h2><p>要在不禁用虚拟鼠标的情况下阻止它在睡眠时发出唤醒信号， 那么只能限制lghub_agent的行为了.</p><p>我们可以通过配置一个计划任务，让系统在息屏时杀死<code>lghub_agent</code>进程， 然后再唤醒时重新启动<code>lghub_agent</code>进程。</p><p>打开任务计划程序， 新建一个计划任务，并按照如下设置。</p><ol><li>无论用户是否登录均运行， 并使用最高权限</li><li>添加触发器： 日志：<code>System</code>，源：<code>Kernel-Power</code>, 事件ID: <code>506</code>(即进入现代睡眠事件)</li><li>添加操作： 启动程序:<code>taskkill</code>, 参数: <code>/f /im lghub_agent.exe</code></li><li>条件： 取消勾选仅在使用电源时激活</li></ol><div class="note warning flat"><p>源：Kernel-Power 部分必须从列表中选择，不能手动输入，否则不能生效</p></div><p><img src="/2021/08/02/ModernStandbyWithGHub/general506.png" alt="1"><br><img src="/2021/08/02/ModernStandbyWithGHub/event506.png" alt="2"><br><img src="/2021/08/02/ModernStandbyWithGHub/action506.png" alt="3"><br><img src="/2021/08/02/ModernStandbyWithGHub/condition506.png" alt="4"><br><img src="/2021/08/02/ModernStandbyWithGHub/settings506.png" alt="5"></p><hr><p>接下来创建用于恢复<code>lghub_agent</code>运行的计划任务， 流程参照上部分</p><ol><li>仅在用户登录时运行</li><li>添加触发器： 日志：<code>System</code>，源：<code>Kernel-Power</code>, 事件ID: <code>507</code>(即退出现代睡眠事件)</li><li>添加操作： 启动程序:<code>&quot;C:\Program Files\LGHUB\lghub_agent.exe&quot;</code>(可按照自己的lghub安装目录选择)</li><li>条件： 取消勾选仅在使用电源时激活</li><li>设置： 取消勾选超过指定时间停止任务选项。</li></ol><p>完成后，你的电脑应该可以正常进入睡眠和使用鼠标宏了。</p><h1 id="Ending"><a href="#Ending" class="headerlink" title="Ending"></a>Ending</h1><p>这个反人类现象的原因显然是罗技G Hub与Modern Standby不兼容造成的， 希望罗技能更新G Hub以兼容Modern Standby。作为一个硬件厂商，一个好用的驱动程序也是用户体验的重要一环。</p><p>同时也希望MS可以优化Modern Standby的唤醒选项，允许通过设备管理器禁用外设唤醒系统的功能。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li>MS Docs: Modern Standby: <a href="https://docs.microsoft.com/en-us/windows-hardware/design/device-experiences/modern-standby">https://docs.microsoft.com/en-us/windows-hardware/design/device-experiences/modern-standby</a></li><li>MS Docs: Modern Standby VS S3: <a href="https://docs.microsoft.com/en-us/windows-hardware/design/device-experiences/modern-standby-vs-s3">https://docs.microsoft.com/en-us/windows-hardware/design/device-experiences/modern-standby-vs-s3</a></li><li>Reddit: G Hub Prevents PC from Sleeping: <a href="https://www.reddit.com/r/LogitechG/comments/kv94at/g_hub_prevents_pc_from_sleeping/">https://www.reddit.com/r/LogitechG/comments/kv94at/g_hub_prevents_pc_from_sleeping/</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在windows上的真正适合强迫症的终端环境</title>
      <link href="/2020/04/17/WindowsTerminal200417/"/>
      <url>/2020/04/17/WindowsTerminal200417/</url>
      
        <content type="html"><![CDATA[<p>Windows 是我用的最多的系统, 但是windows下默认的shell体验实在是太糟糕了,<br>不过， 如果你愿意折腾一番的话， 其实还是能在windows下获得比较好的shell体验的。</p><h2 id="Windows下的bash环境"><a href="#Windows下的bash环境" class="headerlink" title="Windows下的bash环境"></a>Windows下的bash环境</h2><h3 id="Git-Bash"><a href="#Git-Bash" class="headerlink" title="Git Bash"></a>Git Bash</h3><p>Git bash 是 git 在windows下提供的类bash环境, 把很多熟悉的linux命令与应用带到了windows, 例如<code>curl</code>, <code>vim</code>, <code>grep</code>, <code>ssh</code>, <code>sed</code>, <code>xargs</code>等等, 非常适合UN*X用户使用.<br>要安装git bash, 只要<a href="https://git-scm.com/">安装Git</a>即可.</p><p><img src="/2020/04/17/WindowsTerminal200417/git-bash-basic.png" alt="Git Bash Basic"></p><h3 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h3><p><code>PowerShell</code> 是 Windows 加入的功能强大的Shell环境, 在这个shell中你可以使用部分常见的linux命令(<code>ls</code>, <code>cat</code>, <code>curl</code>, 具体参数用法与在linux中有所不同, 毕竟只是对应的powershell命令的别名), 因此无论你习惯用windows还是linux都能很快适应这个终端. 同时powershell具有极高可扩展性, 能直接与<code>.Net</code>交互.  </p><p>现代windows已经预装了基于<code>.Net Framework</code> 的 <code>powershell</code>, 你也可以在<a href="https://aka.ms/pscore6">此处</a>安装基于<code>.Net Core</code>的跨平台<code>PSCore</code>  </p><p>参考: <a href="https://docs.microsoft.com/en-us/powershell/scripting/learn/understanding-important-powershell-concepts?view=powershell-7.x">PowerShell入门</a><br><img src="/2020/04/17/WindowsTerminal200417/powershell.jpg" alt="powershell"></p><h2 id="Windows下更好的控制台终端-Terminal"><a href="#Windows下更好的控制台终端-Terminal" class="headerlink" title="Windows下更好的控制台终端 Terminal"></a>Windows下更好的控制台终端 Terminal</h2><p>终端Terminal决定了控制台窗口的外观. Windows下默认的终端是<code>comhost</code>, 这个终端丑就算了, 在中文环境下(代码页936)还无法使用不带中文字符集的字体, 这意味着无法使用像<code>Consolas</code>, <code>Cascadia Code</code>, <code>Source code pro</code>等字体. 同时<code>comhost</code>也不支持emoji显示, powerlines, otf字体显示等功能.  </p><blockquote><p>事实上中文环境无法使用英语字体的问题可以通过修改编码至utf-8编码来解决, 在<code>设置 &gt; 区域 &gt; 其它区域设置 &gt; 区域 &gt; 管理 &gt; 非Unicode区域设置</code> 勾选<code>Beta版: ...</code>即可<br>但是这样做会导致系统自带指令输出变为英语, 但是至少我不介意&#x3D;.&#x3D;, 学学英语有啥不好的.<br>另外, 这样设置后会导致中文版<code>Adobe After Effects</code>拒绝启动, 如果要用ae的话就别这样设了.</p></blockquote><p>这些问题最好的解决办法就是更换更好的Terminal, 这里我推荐两个终端:</p><ul><li>Windows Terminal</li><li>Terminus</li></ul><h3 id="Windows-Terminal"><a href="#Windows-Terminal" class="headerlink" title="Windows Terminal"></a>Windows Terminal</h3><blockquote><p>pros:</p><ol><li>UWP原生应用, 响应速度较快</li><li>M$自家作品, 很有可能在未来会被直接预装在Windows 10中<br>cons:<br>目前配置仍然较为麻烦, 且功能不及Terminus多</li></ol></blockquote><h3 id="Terminus"><a href="#Terminus" class="headerlink" title="Terminus"></a>Terminus</h3><blockquote><p>pros:<br>配置较为方便, 兼容性广<br>cons:</p><ol><li>Electron应用, 启动较为缓慢</li><li>目前Fluent Effect会出现拖动延迟问题</li></ol></blockquote><h2 id="更好的控制台字体"><a href="#更好的控制台字体" class="headerlink" title="更好的控制台字体"></a>更好的控制台字体</h2><p>这里我推荐两个字体  </p><ul><li><a href="https://github.com/microsoft/cascadia-code">Cascadia Code</a>  </li><li><a href="https://www.jetbrains.com/lp/mono/">Jetbrains Mono</a></li></ul><p>这两个字体其实是非常相似的, 它们都支持 code-specific ligatures, emm, 什么意思看看下面这张gif就明白了:<br><img src="/2020/04/17/WindowsTerminal200417/programming-ligatures.gif" alt="ligatures">  </p><p>它们之间的区别是基础字形稍微有些不同, 下面是它们的比较:<br><img src="/2020/04/17/WindowsTerminal200417/font-compare.png" alt="font-compare"><br>可以明显看出, jetbrains Mono更加瘦长一点, 斜体的角度也更易于阅读<br>此外, Jetbrains Mono为尽量提高小字号下的辨析度去掉了一些不必要的字母细节, 但这样也导致了大写<code>U</code>和小写<code>u</code>比较难以区分.</p><h2 id="Prompt优化"><a href="#Prompt优化" class="headerlink" title="Prompt优化"></a>Prompt优化</h2><blockquote><p>Prompt是一段文字， 用于指示此时正在接受命令。 它从字面上提示用户采取措施<br>–wikipedia</p></blockquote><h3 id="Git-Bash-1"><a href="#Git-Bash-1" class="headerlink" title="Git Bash"></a>Git Bash</h3><p>git bash的默认prompt是：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USER@PC MINGW32 ~/your/path/ (git_branch)</span><br><span class="line">$ </span><br></pre></td></tr></table></figure><p>这段prompt其实已经比较完善了， 如果你仍然希望修改也非常简单。<br>git bash的prompt是通过一段<code>bash</code>脚本实现的， 其位置在<code>/etc/profile.d/git-prompt.sh</code>, 如果你不清楚这个文件的具体位置， 可以__以管理员权限__运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份现有的脚本</span></span><br><span class="line"><span class="built_in">cp</span> /etc/profile.d/git-prompt.sh /etc/profile.d/git-prompt.bak.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Visual Studio Code打开编辑</span></span><br><span class="line">code /etc/profile.d/git-prompt.sh</span><br></pre></td></tr></table></figure><p>可以参考我修改的git prompt</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">TITLEPREFIX=bash</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -f ~/.config/git/git-prompt.sh</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">. ~/.config/git/git-prompt.sh</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">PS1=<span class="string">&#x27;\[\033]0;$TITLEPREFIX:`basename &quot;\w&quot;`\007\]&#x27;</span> <span class="comment"># set window title</span></span><br><span class="line">PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;\n&#x27;</span>                 <span class="comment"># new line</span></span><br><span class="line">PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;\[\033[32m\]&#x27;</span>       <span class="comment"># change to green</span></span><br><span class="line"><span class="comment">#PS1=&quot;$PS1&quot;&#x27;\u@\h &#x27;             # user@host&lt;space&gt;</span></span><br><span class="line">PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;→ &#x27;</span></span><br><span class="line">PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;\[\033[35m\]&#x27;</span>       <span class="comment"># change to purple</span></span><br><span class="line"><span class="comment"># PS1=&quot;$PS1&quot;&#x27;$MSYSTEM &#x27;          # show MSYSTEM</span></span><br><span class="line"><span class="comment"># PS1=&quot;$PS1&quot;&#x27;\[\033[33m\]&#x27;       # change to brownish yellow</span></span><br><span class="line">PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;\w&#x27;</span>                 <span class="comment"># current working directory</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -z <span class="string">&quot;<span class="variable">$WINELOADERNOEXEC</span>&quot;</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">GIT_EXEC_PATH=<span class="string">&quot;<span class="subst">$(git --exec-path 2&gt;/dev/null)</span>&quot;</span></span><br><span class="line">COMPLETION_PATH=<span class="string">&quot;<span class="variable">$&#123;GIT_EXEC_PATH%/libexec/git-core&#125;</span>&quot;</span></span><br><span class="line">COMPLETION_PATH=<span class="string">&quot;<span class="variable">$&#123;COMPLETION_PATH%/lib/git-core&#125;</span>&quot;</span></span><br><span class="line">COMPLETION_PATH=<span class="string">&quot;<span class="variable">$COMPLETION_PATH</span>/share/git/completion&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -f <span class="string">&quot;<span class="variable">$COMPLETION_PATH</span>/git-prompt.sh&quot;</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">. <span class="string">&quot;<span class="variable">$COMPLETION_PATH</span>/git-completion.bash&quot;</span></span><br><span class="line">. <span class="string">&quot;<span class="variable">$COMPLETION_PATH</span>/git-prompt.sh&quot;</span></span><br><span class="line">PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;\[\033[36m\]&#x27;</span>  <span class="comment"># change color to cyan</span></span><br><span class="line">PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;`__git_ps1`&#x27;</span>   <span class="comment"># bash function</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;\[\033[33m\]&#x27;</span>       <span class="comment"># change to brownish yellow</span></span><br><span class="line">PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27; [`date +%H:%M:%S`]&#x27;</span>   <span class="comment"># print time</span></span><br><span class="line">PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;\n&#x27;</span>                 <span class="comment"># new line</span></span><br><span class="line">PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;✗ &#x27;</span>                 <span class="comment"># prompt: always ✗</span></span><br><span class="line">PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;\[\033[0m\]&#x27;</span>        <span class="comment"># clear color</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">MSYS2_PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span>               <span class="comment"># for detection by MSYS2 SDK&#x27;s bash.basrc</span></span><br></pre></td></tr></table></figure><p>效果：<br><img src="/2020/04/17/WindowsTerminal200417/bash.jpg" alt="bash">  </p><h3 id="Powershell"><a href="#Powershell" class="headerlink" title="Powershell"></a>Powershell</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS C:\test\path&gt;</span><br></pre></td></tr></table></figure><p>Powershell的prompt可以说是…非常简陋, 相比起git bash既丑， 提供的有用信息也少。<br>好在powershell可以通过安装插件的方法来更改prompt， 这里我推荐<a href="https://github.com/JanDeDobbeleer/oh-my-posh">oh-my-posh</a>插件<br>使用下面的命令即可安装：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> posh<span class="literal">-git</span> <span class="literal">-Scope</span> CurrentUser</span><br><span class="line"><span class="built_in">Install-Module</span> <span class="built_in">oh</span><span class="literal">-my-posh</span> <span class="literal">-Scope</span> CurrentUser</span><br><span class="line"></span><br><span class="line"><span class="comment"># PS Core需要执行下面的命令</span></span><br><span class="line"><span class="built_in">Install-Module</span> <span class="literal">-Name</span> PSReadLine <span class="literal">-AllowPrerelease</span> <span class="literal">-Scope</span> CurrentUser <span class="literal">-Force</span> <span class="literal">-SkipPublisherCheck</span></span><br></pre></td></tr></table></figure><p>然后使用下面命令可以启用oh-my-posh:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Start the default settings</span></span><br><span class="line"><span class="built_in">Set-Prompt</span></span><br><span class="line"><span class="comment"># Alternatively set the desired theme:</span></span><br><span class="line"><span class="built_in">Set-Theme</span> Paradox</span><br></pre></td></tr></table></figure><blockquote><p>其中Set-Theme命令后可跟不同的prompt主题， 各个主题的效果可参见<a href="https://github.com/JanDeDobbeleer/oh-my-posh#themes">Themes</a><br>你也可以自己制作主题， 方法参见<a href="https://github.com/JanDeDobbeleer/oh-my-posh#creating-your-own-theme">Create your own theme</a>  </p></blockquote><p>值得注意的是， 为了能让posh正常显示， 必须使用带<code>powerline</code>的字体,  建议使用比较新的等宽编程字体， 例如<code>Cascadia Code</code>或者<code>JetBrains Mono</code>， 如果你仍然希望使用不兼容<code>Powerline</code>的字体， 例如<code>Source code pro</code>, 可以在<a href="https://github.com/powerline/fonts">这里</a>下载它们的带<code>powerline</code>版本。<br>另外不要尝试在windows自带的conhost下用这个主题， 不支持的&#x3D;。&#x3D;， 建议用我上文提到的<code>Windows Terminal Preview</code>或<code>Terminus</code>  </p><p>为了让每次启动powershell时都应用oh-my-posh, 需要修改配置文件, 执行下面命令:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(<span class="built_in">Test-Path</span> <span class="literal">-Path</span> <span class="variable">$PROFILE</span> )) &#123; <span class="built_in">New-Item</span> <span class="literal">-Type</span> File <span class="literal">-Path</span> <span class="variable">$PROFILE</span> <span class="literal">-Force</span> &#125;</span><br><span class="line">code <span class="variable">$PROFILE</span></span><br></pre></td></tr></table></figure><p>在<code>visual studio code</code>中输入以下内容</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> posh<span class="literal">-git</span></span><br><span class="line"><span class="built_in">Import-Module</span> <span class="built_in">oh</span><span class="literal">-my-posh</span></span><br><span class="line"><span class="built_in">Set-Theme</span> Paradox <span class="comment"># 可更换成你想要的主题名字</span></span><br></pre></td></tr></table></figure><p>嗯， 这样修改后的powershell还是比较好看的:  </p><p><img src="/2020/04/17/WindowsTerminal200417/powershell.jpg" alt="powershell"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Bash </tag>
            
            <tag> Terminal </tag>
            
            <tag> Shell </tag>
            
            <tag> PowerShell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始创建基于Angular的Electron应用程序</title>
      <link href="/2020/01/23/ElectronAngular/"/>
      <url>/2020/01/23/ElectronAngular/</url>
      
        <content type="html"><![CDATA[<h2 id="警告-阅读下面内容前请详细阅读"><a href="#警告-阅读下面内容前请详细阅读" class="headerlink" title="警告:阅读下面内容前请详细阅读"></a>警告:阅读下面内容前请详细阅读</h2><p>下面的内容是我在尝试构建<code>RailgunMediaEncoder</code>中尝试使用的方法, 我无法保证下面的方法绝对符合”最佳实践”.<br>USE IT AT YOUR OWN RISK.<br>如果有任何问题及建议,欢迎提出.</p><h2 id="0-开始之前"><a href="#0-开始之前" class="headerlink" title="0. 开始之前"></a>0. 开始之前</h2><p>一个标准的Electron的应用由两部分组成:  用于在后台运行的主线程项目和在前台运行的ui线程项目. 这两部分是相对独立的, 其间的通讯只能通过ipc(线程间通讯)完成. 在开发时, 这两部分也应该作为两个独立的项目来管理.<br>这里我们主线程使用纯TypeScript完成主线程项目, 使用Angular + TypeScript完成ui线程项目.<br>下面的例子中我们希望的源代码目录结构:<br><img src="/2020/01/23/ElectronAngular/01.png" alt="Project Structure">  </p><h2 id="1-创建Angular项目"><a href="#1-创建Angular项目" class="headerlink" title="1. 创建Angular项目"></a>1. 创建Angular项目</h2><p>首先确保你已经全局安装了Angular CLI,如果没有, 使用下面的命令安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @angular/cli</span><br></pre></td></tr></table></figure><p>安装后，首先使用以下命令来创建一个空白项目(不包含app)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new --createApplication=<span class="literal">false</span> --newProjectRoot=<span class="string">&quot;./&quot;</span> HelloElectron</span><br></pre></td></tr></table></figure><p>完成后,建议使用vscode打开项目目录(这里为<code>HelloElectron</code>)来继续我们的下一步操作.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> HelloElectron</span><br><span class="line">code .</span><br></pre></td></tr></table></figure><p>继续执行以下命令来创建前端应用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng generate app ui</span><br></pre></td></tr></table></figure><p>在 cli 询问 <code>? Would you like to add Angular routing? (y/N)</code>时, 输入y来添加路由, 其它选项按需选择.</p><p>以上命令跑完后, 运行<code>ng serve --open</code> 应该可以在浏览器中看到angular的hello world页面.<br><img src="/2020/01/23/ElectronAngular/02.png" alt="Hello world"></p><p>接下来,打开<code>angular.json</code>修改生成设置.</p><ol><li>修改<code>outputPath</code>为<code>dist/app/ui</code></li><li>修改<code>outputHashing</code>为<code>none</code></li></ol><p>打开<code>ui/src/index.html</code>, 修改base href:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line">修改为:</span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;./&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-配置Electron"><a href="#2-配置Electron" class="headerlink" title="2.配置Electron"></a>2.配置Electron</h2><p>安装以下必备库</p><ul><li>Electron <code>npm install --save-dev electron</code></li><li>ngx-electron <code>npm install --save ngx-electron</code></li><li>@types&#x2F;node <code>npm install --save-dev @types/node</code></li><li>electron-builder (用于打包electron应用， 若手动打包可不安装) <code>npm install --save-dev electron-builder</code></li></ul><p>PS: 如果你深受<code>The Girl Friend Wall</code>困扰的话, 安装Electron时post-install部分可能会卡非常非常非常久(npm需要下载90MB左右的Electron包). 此时可以参考<a href="https://docs.npmjs.com/misc/config#https-proxy">http-proxy</a>设置代理.</p><h2 id="3-建立主线程项目"><a href="#3-建立主线程项目" class="headerlink" title="3. 建立主线程项目"></a>3. 建立主线程项目</h2><p>首先， 创建目录<code>core/</code> , 在之中创建<code>tsconfig.json</code>, 内容参考如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compileOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es2015&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../dist/app&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typeRoots&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;../node_modules/@types&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;experimentalDecorators&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>创建<code>tslint.json</code>,配置可自行按需设定,或直接复制<code>ui/tslint.json</code>中的内容.</p><p>创建<code>index.ts</code>作为整个Electron应用的入口点, 内容如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;app, <span class="title class_">BrowserWindow</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;electron&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">mainWindow</span>: <span class="title class_">BrowserWindow</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 单进程锁, 按需添加</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">singleInstance</span>(<span class="params"></span>) &#123;</span><br><span class="line">  app.<span class="title function_">requestSingleInstanceLock</span>();</span><br><span class="line"></span><br><span class="line">  app.<span class="title function_">on</span>(<span class="string">&#x27;second-instance&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mainWindow) &#123;</span><br><span class="line">      <span class="keyword">if</span> (mainWindow.<span class="title function_">isMinimized</span>()) &#123;</span><br><span class="line">        mainWindow.<span class="title function_">restore</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      mainWindow.<span class="title function_">focus</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建主窗口</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">  mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">1080</span>,</span><br><span class="line">    <span class="attr">minWidth</span>: <span class="number">680</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">840</span>,</span><br><span class="line">    <span class="attr">frame</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">title</span>: app.<span class="property">name</span>,</span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">experimentalFeatures</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  mainWindow.<span class="title function_">loadURL</span>(path.<span class="title function_">join</span>(<span class="string">&#x27;file://&#x27;</span>, __dirname, <span class="string">&#x27;ui/index.html&#x27;</span>));</span><br><span class="line">  mainWindow.<span class="property">webContents</span>.<span class="title function_">on</span>(<span class="string">&#x27;will-navigate&#x27;</span>, <span class="function">(<span class="params">event, url</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (url !== path.<span class="title function_">join</span>(<span class="string">&#x27;file://&#x27;</span>, __dirname, <span class="string">&#x27;ui/index.html&#x27;</span>)) &#123;</span><br><span class="line">      event.<span class="title function_">preventDefault</span>();</span><br><span class="line">      mainWindow.<span class="title function_">loadURL</span>(path.<span class="title function_">join</span>(<span class="string">&#x27;file://&#x27;</span>, __dirname, <span class="string">&#x27;ui/index.html&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">singleInstance</span>();</span><br><span class="line">  app.<span class="title function_">on</span>(<span class="string">&#x27;ready&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">createWindow</span>();</span><br><span class="line">    <span class="comment">// 创建窗口后立即打开DevTools, 按需选择.</span></span><br><span class="line">    <span class="comment">//mainWindow.webContents.openDevTools();</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">&#x27;darwin&#x27;</span>) &#123;</span><br><span class="line">      app.<span class="title function_">quit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  app.<span class="title function_">on</span>(<span class="string">&#x27;activate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mainWindow === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="title function_">createWindow</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>();</span><br></pre></td></tr></table></figure><h2 id="4-配置生成脚本"><a href="#4-配置生成脚本" class="headerlink" title="4. 配置生成脚本"></a>4. 配置生成脚本</h2><p>打开<code>package.json</code>, 将script节替换为以下内容:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc -p core &amp;&amp; ng build&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build-prod&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc -p core &amp;&amp; ng build --prod&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run build &amp;&amp; electron ./dist/app/index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;clean&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rm ./dist -rf&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo Linting UI &amp;&amp; ng lint &amp;&amp; echo Linting Core... &amp;&amp; tslint -p core&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h2 id="5-配置自动打包-可选"><a href="#5-配置自动打包-可选" class="headerlink" title="5. 配置自动打包(可选)"></a>5. 配置自动打包(可选)</h2><p>首先请确保你已经安装了electron-builder<br>在package.json中添加<code>build</code>节</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;appId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;net.example.HelloElectron&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;productName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hello Electron&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;directories&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;app&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/app&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;output&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/pack&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nsis&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;oneClick&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;perMachine&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;allowToChangeInstallationDirectory&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LICENSE&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;artifactName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;productName&#125;.Setup.$&#123;version&#125;.$&#123;ext&#125;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;win&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nsis&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zip&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mac&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dmg&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;linux&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;deb&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rpm&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tar.gz&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>有关以上json的更多信息,可参见<a href="https://www.electron.build/configuration/configuration">Configuration</a>.</p><p>然后在script节添加publish:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;publish&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cp package.release.json dist/app/package.json &amp;&amp; electron-builder&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>接下来,创建<code>package.build.json</code>, 内容参考如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HelloElectron&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;EdgeNeko&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;homepage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://example.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIT&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>dependencies</code>中,添加需要打包到最终应用的node库.<br>有关双package.json结构, 可参考<a href="https://www.electron.build/tutorials/two-package-structure">此文档</a>.</p><p>运行以下命令即可打包:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run clean</span><br><span class="line">npm run build-prod</span><br><span class="line">npm run publish</span><br></pre></td></tr></table></figure><p>打包结果会保存在<code>dist/pack</code></p><h2 id="6-示例-在ui线程调用Node"><a href="#6-示例-在ui线程调用Node" class="headerlink" title="6. 示例:在ui线程调用Node"></a>6. 示例:在ui线程调用Node</h2><p>创建一个服务,名为NodeService, 内容如下:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Injectable</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ElectronService</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;ngx-electron&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  <span class="attr">providedIn</span>: <span class="string">&#x27;root&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">NodeService</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="attr">fs</span>: <span class="keyword">typeof</span> fs;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">childProcess</span>: <span class="keyword">typeof</span> childProcess;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    electronService: ElectronService</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fs</span> = electronService.<span class="property">remote</span>.<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来,就可以通过注入<code>NodeService</code>并以<code>nodeService.fs</code>来调用node中的fs了.</p><h2 id="7-配置调试"><a href="#7-配置调试" class="headerlink" title="7. 配置调试"></a>7. 配置调试</h2><p>这部分目前我还没有什么好的解决方案,如果米娜桑有解决方案欢迎在下面提出QAQ</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Electron </tag>
            
            <tag> Angular </tag>
            
            <tag> Desktop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新年快乐</title>
      <link href="/2019/02/05/newYear/"/>
      <url>/2019/02/05/newYear/</url>
      
        <content type="html"><![CDATA[<h1 id="新年快乐-各位"><a href="#新年快乐-各位" class="headerlink" title="新年快乐,各位"></a>新年快乐,各位</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ModernMessageBoxLib 发布</title>
      <link href="/2019/01/31/ModernMessageBoxLib/"/>
      <url>/2019/01/31/ModernMessageBoxLib/</url>
      
        <content type="html"><![CDATA[<h1 id="ModernMessageBoxLib"><a href="#ModernMessageBoxLib" class="headerlink" title="ModernMessageBoxLib"></a>ModernMessageBoxLib</h1><p>ModernMessageBoxLib is a WPF library in .Net 4.5<br>By using ModernMessageBoxLib, you can create a ModernMessageBox with a single code.</p><p><a href="https://www.nuget.org/packages/ModernMessageBoxLib/"><img src="https://img.shields.io/nuget/v/ModernMessageBoxLib.svg" alt="NuGet"></a>  <a href="https://www.nuget.org/packages/ModernMessageBoxLib/"><img src="https://img.shields.io/nuget/dt/ModernMessageBoxLib.svg" alt="NuGet"></a>  <a href="https://www.nuget.org/packages/ModernMessageBoxLib/"><img src="https://img.shields.io/badge/By-SakuraTrak%20Studio-blue.svg" alt="by"></a></p><h2 id="Todo-list"><a href="#Todo-list" class="headerlink" title="Todo list"></a>Todo list</h2><ul><li><input checked="" disabled="" type="checkbox"> Basic MessageBox</li><li><input checked="" disabled="" type="checkbox"> Input Window</li><li><input checked="" disabled="" type="checkbox"> Waiting window</li><li><input disabled="" type="checkbox"> Color Picker</li></ul><h2 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h2><h3 id="ModernMessageBox"><a href="#ModernMessageBox" class="headerlink" title="ModernMessageBox"></a>ModernMessageBox</h3><p><img src="https://github.com/hv0905/ModernMessageBoxLibForWPF/raw/master/web/sc1.png" alt="sc1"></p><p><img src="https://github.com/hv0905/ModernMessageBoxLibForWPF/raw/master/web/sc2.png" alt="sc2"></p><p><img src="https://github.com/hv0905/ModernMessageBoxLibForWPF/raw/master/web/sc3.png" alt="sc3"></p><h3 id="IndeterminateProgressWindow"><a href="#IndeterminateProgressWindow" class="headerlink" title="IndeterminateProgressWindow"></a>IndeterminateProgressWindow</h3><p><img src="https://github.com/hv0905/ModernMessageBoxLibForWPF/raw/master/web/sc4.png" alt="sc4"></p><h2 id="Import"><a href="#Import" class="headerlink" title="Import"></a>Import</h2><p>We are strongly recommend you to use Nuget to import the package.<br>Run this command in Package Manage Console:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PM&gt; Install-Package ModernMessageBoxLib</span><br></pre></td></tr></table></figure><p><em>(See more in <a href="https://www.nuget.org/packages/ModernMessageBoxLib/">Nuget</a>)</em></p><p>Or you can download it on Release Page.</p><h2 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h2><h3 id="ModernMessageBox-1"><a href="#ModernMessageBox-1" class="headerlink" title="ModernMessageBox"></a>ModernMessageBox</h3><p>Before start using, you should specify Language and Background and Foreground.<br>See</p><ul><li><p><em>QModernMessageBox.MainLang</em></p></li><li><p><em>QModernMessageBox.GlobalBackground</em></p></li><li><p><em>QModernMessageBox.GlobalForeground</em></p></li></ul><p>Example:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">QModernMessageBox.MainLang = <span class="keyword">new</span> QMetroMessageLang() &#123;</span><br><span class="line">    Ok = <span class="string">&quot;确定&quot;</span>,</span><br><span class="line">    Cancel = <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">    Abort = <span class="string">&quot;中止(A)&quot;</span>,</span><br><span class="line">    Ignore = <span class="string">&quot;忽略(I)&quot;</span>,</span><br><span class="line">    No = <span class="string">&quot;否(N)&quot;</span>,</span><br><span class="line">    Yes = <span class="string">&quot;是(Y)&quot;</span>,</span><br><span class="line">    Retry = <span class="string">&quot;重试(R)&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line">QModernMessageBox.GlobalBackground = <span class="keyword">new</span> SolidColorBrush(Colors.White)&#123;Opacity = <span class="number">0.6</span>&#125;;</span><br><span class="line">QModernMessageBox.GlobalForeground = Brushes.Black;</span><br></pre></td></tr></table></figure><p>In this example, The button text of the ModernMessageBox set to Chinese and Background set to white with 60% opacity and Foreground set to Black.</p><p>Those setting will use as default in ModernMessageBox.</p><blockquote><p>The default Background in MessageBox is Black, 60% Opacity and the Foreground is White</p><p>The default lang is in English</p></blockquote><blockquote><p>In background setting, you can use a color with not fully solid.<br>In this way, the window will have a Gaussian Blur background in Win10 1803+<br>In win7&#x2F;8&#x2F;8.1 or early version of win10, it will still use the solid color as background.<br>If you don’t want a gaussian blur, just set the color solid.</p></blockquote><p>In common cases, you can create a MetroMessageBox with the following code</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QModernMessageBox.Show(<span class="string">&quot;The quick brown fox jumps over the lazy dog.&quot;</span>, <span class="string">&quot;hello world&quot;</span>,QModernMessageBox.QModernMessageBoxButtons.YesNoCancel,ModernMessageboxIcons.Warning);</span><br></pre></td></tr></table></figure><p>Or using the QT way:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QModernMessageBox.Warning(<span class="string">&quot;The quick brown fox jumps over the lazy dog.&quot;</span>, <span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure><p>Customize:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> msg = <span class="keyword">new</span> ModernMessageBox(<span class="string">&quot;The quick brown fox jumps over the lazy dog.\n&quot;</span>, <span class="string">&quot;hello world&quot;</span>, ModernMessageboxIcons.Info, <span class="string">&quot;CSharp&quot;</span>, <span class="string">&quot;Java&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Python&quot;</span>) &#123;</span><br><span class="line">    Button1Key = Key.D1,</span><br><span class="line">    Button2Key = Key.D2,</span><br><span class="line">    Button3Key = Key.D3,</span><br><span class="line">    CheckboxText = <span class="string">&quot;Don&#x27;t show this again&quot;</span>,</span><br><span class="line">    CheckboxVisibility = Visibility.Visible,</span><br><span class="line">    TextBoxText = <span class="string">&quot;some staff&quot;</span>,</span><br><span class="line">    TextBoxVisibility = Visibility.Visible,</span><br><span class="line">&#125;;</span><br><span class="line">        </span><br><span class="line">msg.ShowDialog();</span><br></pre></td></tr></table></figure><h3 id="IndeterminateProgressWindow-1"><a href="#IndeterminateProgressWindow-1" class="headerlink" title="IndeterminateProgressWindow"></a>IndeterminateProgressWindow</h3><p>Before start using, you should specify Background and Foreground.<br>See:</p><ul><li><p><em>IndeterminateProgressWindow.GlobalBackground</em></p></li><li><p><em>IndeterminateProgressWindow.GlobalForeground</em></p></li></ul><p>Usage:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">var</span> win = <span class="keyword">new</span> IndeterminateProgressWindow(<span class="string">&quot;Please wait while we are installing the virus into your computer. . .&quot;</span>);</span><br><span class="line">win.Show();</span><br><span class="line"><span class="comment">//Do Some Staff</span></span><br><span class="line"><span class="keyword">await</span> Task.Delay(<span class="number">5000</span>);</span><br><span class="line"><span class="comment">//Change the message the 2nd time</span></span><br><span class="line">win.Message = <span class="string">&quot;Done!!!&quot;</span>;</span><br><span class="line">win.Close();</span><br></pre></td></tr></table></figure><p>See more in the XML document comment.</p><h1 id="About"><a href="#About" class="headerlink" title="About"></a>About</h1><p>Using this library means you agree the MIT Licence.<br>Build with ❤ By Saber0905 in SakuraTrak Studio</p>]]></content>
      
      
      
        <tags>
            
            <tag> WPF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Saber&#39;s Colorful Startmenu</title>
      <link href="/2019/01/31/SaberColorfulStartmenu/"/>
      <url>/2019/01/31/SaberColorfulStartmenu/</url>
      
        <content type="html"><![CDATA[<h1 id="Saber’s-Color-Startmenu"><a href="#Saber’s-Color-Startmenu" class="headerlink" title="Saber’s Color Startmenu"></a>Saber’s Color Startmenu</h1><h1 id="开始菜单磁贴自定义工具"><a href="#开始菜单磁贴自定义工具" class="headerlink" title="开始菜单磁贴自定义工具"></a>开始菜单磁贴自定义工具</h1><p><img src="https://img.shields.io/appveyor/ci/hv0905/SaberColorfulStartmenu.svg?style=flat-square&logo=appveyor" alt="AppVeyor"></p><h2 id="反馈（或点击Issues）-Feedback"><a href="#反馈（或点击Issues）-Feedback" class="headerlink" title="反馈（或点击Issues） Feedback"></a><a href="https://github.com/hv0905/SaberColorfulStartmenu/issues">反馈（或点击Issues） Feedback</a></h2><h2 id="主页-Homepage"><a href="#主页-Homepage" class="headerlink" title="主页 Homepage"></a><a href="https://edgeneko.github.io/2019/01/31/SaberColorfulStartmenu/">主页 Homepage</a></h2><h3 id="感谢支持-Thanks-for-your-Support"><a href="#感谢支持-Thanks-for-your-Support" class="headerlink" title="感谢支持^_^  Thanks for your Support ^_^"></a>感谢支持^_^  Thanks for your Support ^_^</h3><h3 id="嗯，这个工具可以更改你的开始菜单应用磁贴的颜色，图标等。"><a href="#嗯，这个工具可以更改你的开始菜单应用磁贴的颜色，图标等。" class="headerlink" title="嗯，这个工具可以更改你的开始菜单应用磁贴的颜色，图标等。"></a>嗯，这个工具可以更改你的开始菜单应用磁贴的颜色，图标等。</h3><h3 id="This-tool-can-change-the-app’s-logo-and-background-color-in-your-Win10-startmenu"><a href="#This-tool-can-change-the-app’s-logo-and-background-color-in-your-Win10-startmenu" class="headerlink" title="This tool can change the app’s logo and background color in your Win10 startmenu."></a>This tool can change the app’s logo and background color in your Win10 startmenu.</h3><h3 id="应用下载-App-Download"><a href="#应用下载-App-Download" class="headerlink" title="应用下载 App Download:"></a>应用下载 App Download:</h3><p><a href="https://github.com/hv0905/SaberColorfulStartmenu/releases">Github Release下载 Download from Github Release</a><br><a href="https://ci.appveyor.com/project/hv0905/sabercolorfulstartmenu/build/artifacts">你也可以从ci下载最新的非正式发布版本</a><br><a href="https://ci.appveyor.com/project/hv0905/sabercolorfulstartmenu/build/artifacts">you can download the newest developing version from our CI.</a>  </p><h3 id="关于-About"><a href="#关于-About" class="headerlink" title="关于 About:"></a>关于 About:</h3><blockquote><p>Saber’s Colorful Startmenu Version:1.2 (release 1.2)</p><p>作者：EdgeNeko</p><p>by EdgeNeko</p><p>仅支持Win10操作系统</p><p>Only Windows 10 is supported.</p><p>本程序可以通过修改快捷方式文件下的visualelementsmanifest.xml对开始菜单图标进行定制</p><p>This program can change the app logo in start menu by changing the visualelementsmanifist.xml file.</p><p>本程序部分图标取自 Windows 9 Icons 作者: dtafalonso</p><p>Icon resource is from WIndows 9 Icons (by dtafalonso)</p><p>See also: dtafalonso.deviantart.com&#x2F;art&#x2F;Windows-9-icons-359505915</p><p>背景：取自b站，如果你知道原作者可以在github反馈。</p><p>Background is from bilibili and you can tell me if you know the author.</p><p>基于C# WPF .Net Framework 4.6.2 使用Visual Studio 2017 Community编译</p><p>Base on C# WPF .Net Framework 4.6.2. Build with Visual Studio 2017 Community</p><p>本程序开放源代码,任何人可以免费散布&#x2F;重新编译本程序,如需下载源代码，请前往Github页面。</p><p>本程序使用MIT许可协议.</p><p>Licensed under MIT License.</p></blockquote><h1 id="截图-Snapshots："><a href="#截图-Snapshots：" class="headerlink" title="截图 Snapshots："></a>截图 Snapshots：</h1><p><img src="https://user-images.githubusercontent.com/29349119/42812991-f4908e54-89f1-11e8-8d4f-72dde55937d1.PNG" alt="shot1"><br><img src="https://user-images.githubusercontent.com/29349119/42812994-f611b276-89f1-11e8-8582-1a68ba41b9dd.PNG" alt="shot4"><br><img src="https://user-images.githubusercontent.com/29349119/42812997-f6ac4e12-89f1-11e8-8588-0971a8756af6.PNG" alt="shot5"><br><img src="https://user-images.githubusercontent.com/29349119/42984645-349df3ee-8c20-11e8-930f-1c446a9c89d8.png" alt="screenshot1"><br><img src="https://user-images.githubusercontent.com/29349119/42984646-35a2848a-8c20-11e8-94de-9e8cf4ef0276.png" alt="screenshot2"></p><h1 id="支持-Support"><a href="#支持-Support" class="headerlink" title="支持 Support"></a>支持 Support</h1><p>开发不易,请作者喝瓶肥宅快乐水吧.</p><p>Support us!(●’◡’●)</p><table><thead><tr><th align="center">支付宝</th><th align="center">微信</th></tr></thead><tbody><tr><td align="center"><img src="https://github.com/hv0905/SaberColorfulStartmenu/raw/master/web/alipay.jpg" alt="alipay"></td><td align="center"><img src="https://github.com/hv0905/SaberColorfulStartmenu/raw/master/web/wechat_pay.jpg" alt="weixin"></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> WPF </tag>
            
            <tag> Win10美化 </tag>
            
            <tag> SakuraTrak Studio </tag>
            
            <tag> kawaii </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到EdgeNeko&#39;s Site</title>
      <link href="/2018/01/01/Welcome/"/>
      <url>/2018/01/01/Welcome/</url>
      
        <content type="html"><![CDATA[<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">EdgeNeko</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;Earth/Nekos&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="Hi-I’m-EdgeNeko"><a href="#Hi-I’m-EdgeNeko" class="headerlink" title="Hi, I’m EdgeNeko."></a>Hi, I’m EdgeNeko.</h3><h3 id="welcome-to-my-profile"><a href="#welcome-to-my-profile" class="headerlink" title="welcome to my profile."></a>welcome to my profile.</h3><p align="center"><a href="//github.com/hv0905"><img src="https://github-readme-stats.vercel.app/api?username=hv0905&hide_border=true&show_icons=true&theme=buefy"/></a></p>  <hr><p>📔 A new-coming college student in SCUT Software Engineering Academy.</p><p>🚀 Knowing a little about both frontend and backend. Focusing on C#, Typescript, C++, knowing a little about Java</p><p>⌨ A member in <a href="//www.aiursoft.com">AiursoftWeb</a>, an organization focusing on open platform and open communication.</p><p style="text-align: center;">  <strong><a href="mailto:edgeneko@aiursoft.com">✉ Email Me</a></strong> |  <strong><a href="//edgeneko.aiursoft.com">💻 Official Website</a></strong> |  <strong><a href="//github.com/hv0905"> ☁ GitHub</a></strong> |  <strong><a href="//space.bilibili.com/26158913">📺 Bilibili</a></strong> |  <strong><a href="https://discord.gg/8dWcRHqdAU">✈️ Discord</a></strong> |  <strong><a href="https://web.kahla.app/user/bcbd915e-6d11-4cc0-8093-d64222e46724">🗨 Kahla</a></strong></p><p align="right">  <i>Cover PixArt: pixiv 73492057</i></p><blockquote><p>更详细的About Me页面在计划中<br>先看看GitHub Profile中的介绍吧（）</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/404.html"/>
      <url>/404.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center;">    <pre style="font-size: 16px;">    ,-.       _,---._ __  / \/  )    .-'       `./ /   \(  (   ,'            `/    /|\  `-"             \'\   / | `.              ,  \ \ /  |  /`.          ,'-`----Y   | (            ;        |   ' |  ,-.    ,-'         |  / |  | (   |        404 | / )  |  \  `.___________|/ `--'   `--'    </pre>    <h2>在这条世界线上并不存在这个页面QAQ</h2>    <h3><a href="/">返回主页</a></h3></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
